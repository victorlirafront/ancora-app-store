import Aside from '@/components/Aside/Aside';
import Card from '@/components/Card/Card';
import GenderFilter from '@/components/GenderFilter/GenderFilter';
import Header from '@/components/Header/Header';
import Head from 'next/head';
import { SWAPI } from '@/constants/endpoints';
import { RootState, wrapper } from '@/redux/store';
import { fetchDataSuccess } from '@/redux/swapiSlice';
import { useSelector } from 'react-redux';
import Footer from '@/components/Footer/Footer';
import axios from 'axios';
import { useEffect } from 'react';
import useFetchData from '@/hooks/useFetchData';
import { Data } from '@/types/swapi';

export default function Home() {
  useSelector((state: RootState) => state.swapi);
  const category = useSelector((state: RootState) => state.swapi.category);
  const { data, loading: fetchLoading, error: fetchError } = useFetchData<Data>(category);

  useEffect(() => {
    if (data) {
      console.log('Data fetched:', data);
    }
  }, [data]);

  return (
    <>
      <Head>
        <title>Hunter Stack Challenge</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="main">
        <Aside />
        <div style={{ flex: 1 }}>
          <Header />
          <GenderFilter />
          {fetchLoading && <p style={{ color: '#fff' }}>Loading...</p>}
          {fetchError && <p style={{ color: 'red' }}>Error: {fetchError.message}</p>}
          <div className="cards-wrapper">
            {!fetchLoading &&
              data?.results.map((item, index) => {
                return <Card key={index} {...item} />;
              })}
          </div>
          <Footer />
        </div>
      </div>
    </>
  );
}

export const getServerSideProps = wrapper.getServerSideProps((store) => async () => {
  try {
    const response = await axios.get(`${SWAPI}/people`);
    const data = response.data;

    store.dispatch(fetchDataSuccess(data));

    return { props: {} };
  } catch (error) {
    console.error('Error fetching data:', error);
    return { props: {} };
  }
});
