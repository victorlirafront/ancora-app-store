import Aside from '@/components/Aside/Aside';
import Card from '@/components/Card/Card';
import GenderFilter from '@/components/GenderFilter/GenderFilter';
import Header from '@/components/Header/Header';
import Head from 'next/head';
import { SWAPI } from '@/constants/endpoints';
import { RootState, wrapper } from '@/redux/store';
import { fetchDataSuccess } from '@/redux/swapiSlice';
import { useSelector, useDispatch } from 'react-redux';
import Footer from '@/components/Footer/Footer';
import axios from 'axios';
import useFetchData from '@/hooks/useFetchData';
import { Data, Film, Person, Planet } from '@/types/swapi';
import { LoadingSpinner } from '@/components/UI/LoadingSpinner/LoadingSpinner';
import { getCategoryTextColor } from '@/helper/getCategoryTextColor/getCategoryTextColor';
import { createDisplayObject } from '@/helper/createDisplayObject/createDisplayObject';
import { useEffect, useState } from 'react';
import { filterData } from '@/helper/filterCurrentData/filterCurrentData';
import AOS from 'aos';
import 'aos/dist/aos.css';

const Home = () => {
  const dispatch = useDispatch();
  const category = useSelector((state: RootState) => state.swapi.category);
  const { data, loading: fetchLoading, error: fetchError } = useFetchData<Data>(category);
  const [filteredData, setFilteredData] = useState<(Person | Planet | Film)[] | null>(null);
  const [showAside, setShowAside] = useState(true);
  const categoryTextColor = getCategoryTextColor(category);

  useEffect(() => {
    setFilteredData(null);
  }, [category]);

  useEffect(() => {
    if (data) dispatch(fetchDataSuccess(data));
  }, [data, dispatch]);

  useEffect(() => {
    AOS.init();

    if (window.innerWidth < 768) {
      setShowAside(false);
    }
  }, []);

  const handleClickedSuggestion = (keyword: string) => {
    if (!data?.results) return;

    if (keyword === 'reset') {
      setFilteredData(data.results);
    } else {
      const property = category === 'films' ? 'title' : 'name';
      setFilteredData(
        data.results.filter((item) => {
          if (property === 'title' && 'title' in item) {
            return item.title === keyword;
          }
          if (property === 'name' && 'name' in item) {
            return item.name === keyword;
          }
          return false;
        }),
      );
    }
  };

  const handleFilterData = (selectedFilter: string) => {
    setFilteredData(filterData(selectedFilter, category, data));
  };

  const toggleAside = () => setShowAside((prev) => !prev);

  const renderCards = () => {
    const items = filteredData ?? data?.results;
    if (!items) return null;

    return items.map((item, index) => {
      const currentObject = createDisplayObject(category, item);
      return (
        <Card
          key={index}
          category={category}
          textColor={categoryTextColor}
          info_1={currentObject.info_1}
          info_2={currentObject.info_2}
          info_3={currentObject.info_3}
          info_4={currentObject.info_4}
          url={currentObject.url}
        />
      );
    });
  };

  return (
    <>
      <Head>
        <title>Hunter Stack Challenge</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="main">
        <Aside className={showAside ? '' : 'disabled'} />
        <div style={{ flex: 1 }}>
          <Header
            arrowClassName={showAside ? '' : 'disabled'}
            onAsideToggler={toggleAside}
            onClickedSuggestion={handleClickedSuggestion}
          />
          <GenderFilter onCategoryFilter={handleFilterData} />
          {fetchLoading && <LoadingSpinner />}
          {fetchError && <p style={{ color: 'red' }}>Error: {fetchError.message}</p>}
          <div className="cards-container">
            <div className="cards-wrapper" data-aos="fade-up">
              {!fetchLoading && renderCards()}
            </div>
          </div>
          <Footer />
        </div>
      </div>
    </>
  );
};

export const getServerSideProps = wrapper.getServerSideProps((store) => async () => {
  try {
    const { data } = await axios.get(`${SWAPI}/people`);
    store.dispatch(fetchDataSuccess(data));
    return { props: {} };
  } catch (error) {
    console.error('Error fetching data:', error);
    return { props: {} };
  }
});

export default Home;
