import Aside from '@/components/Aside/Aside';
import Card from '@/components/Card/Card';
import GenderFilter from '@/components/GenderFilter/GenderFilter';
import Header from '@/components/Header/Header';
import Head from 'next/head';
import { SWAPI } from '@/constants/endpoints';
import { RootState, wrapper } from '@/redux/store';
import { fetchDataSuccess } from '@/redux/swapiSlice';
import { useSelector } from 'react-redux';
import Footer from '@/components/Footer/Footer';
import axios from 'axios';
import useFetchData from '@/hooks/useFetchData';
import { Data, Film, Person, Planet } from '@/types/swapi';
import { LoadingSpinner } from '@/components/UI/LoadingSpinner/LoadingSpinner';
import { getCategoryTextColor } from '@/helper/getCategoryTextColor/getCategoryTextColor';
import { createDisplayObject } from '@/helper/createDisplayObject/createDisplayObject';
import { useEffect, useState } from 'react';
import { filterData } from '@/helper/filterCurrentData/filterCurrentData';
import { useDispatch } from 'react-redux';

export default function Home() {
  const dispatch = useDispatch();
  useSelector((state: RootState) => state.swapi);
  const category = useSelector((state: RootState) => state.swapi.category);
  const { data, loading: fetchLoading, error: fetchError } = useFetchData<Data>(category);
  const [filteredData, setFilteredData] = useState<(Person | Planet | Film)[] | null>(null);
  const categoryTextColor = getCategoryTextColor(category);
  const [showAside, setShowAside] = useState(true);

  useEffect(() => {
    setFilteredData(null);
  }, [category]);

  function filterCurrentData(selectedFilter: string) {
    const filteredData = filterData(selectedFilter, category, data);
    setFilteredData(filteredData);
  }

  useEffect(() => {
    if (data) {
      dispatch(fetchDataSuccess(data));
    }
  }, [data, dispatch]);

  function clickedSuggestion(keyword: string) {
    if (keyword === 'reset' && data?.results) {
      setFilteredData(data?.results);
    } else if (data?.results) {
      const property = category === 'films' ? 'title' : 'name';
      const result = data?.results.filter((item) => item[property] === keyword);
      setFilteredData(result);
    }
  }

  function asideToggler() {
    setShowAside((prev) => !prev);
  }

  return (
    <>
      <Head>
        <title>Hunter Stack Challenge</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="main">
        <Aside className={showAside ? '' : 'disabled'} />
        <div style={{ flex: 1 }}>
          <Header
            arrowClassName={showAside ? '' : 'disabled'}
            onAsideToggler={asideToggler}
            onClickedSuggestion={clickedSuggestion}
          />
          <GenderFilter onCategoryFilter={filterCurrentData} />
          {fetchLoading && <LoadingSpinner />}
          {fetchError && <p style={{ color: 'red' }}>Error: {fetchError.message}</p>}
          <div className="cards-container">
            <div className="cards-wrapper">
              {!fetchLoading &&
                (filteredData || data?.results).map((item: Person | Planet | Film, index) => {
                  const currentObject = createDisplayObject(category, item);
                  return (
                    <Card
                      key={index}
                      category={category}
                      textColor={categoryTextColor}
                      info_1={currentObject.info_1}
                      info_2={currentObject.info_2}
                      info_3={currentObject.info_3}
                    />
                  );
                })}
            </div>
          </div>
          <Footer />
        </div>
      </div>
    </>
  );
}

export const getServerSideProps = wrapper.getServerSideProps((store) => async () => {
  try {
    const response = await axios.get(`${SWAPI}/people`);
    const data = response.data;

    store.dispatch(fetchDataSuccess(data));

    return { props: {} };
  } catch (error) {
    console.error('Error fetching data:', error);
    return { props: {} };
  }
});
